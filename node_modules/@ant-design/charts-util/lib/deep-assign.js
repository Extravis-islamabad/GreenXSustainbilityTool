"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deepAssign = void 0;
var isArray = function (obj) { return Array.isArray(obj); };
var isObject = function (obj) {
    return obj !== null && typeof obj === 'object' && !isArray(obj);
};
/**
 * @title 深度合并
 * @param {object} target 目标对象
 * @param {object} sources 源对象
 * @description 深度合并对象，用于合并配置，数组类型目前只支持覆盖
 */
var deepAssign = function (target) {
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    if (!sources.length)
        return target;
    var source = sources.shift();
    for (var key in source) {
        if (Object.hasOwnProperty.call(source, key)) {
            if (isObject(source[key])) {
                if (!target[key] || typeof target[key] !== 'object') {
                    target[key] = {};
                }
                (0, exports.deepAssign)(target[key], source[key]);
            }
            else {
                target[key] = source[key];
            }
        }
    }
    return exports.deepAssign.apply(void 0, __spreadArray([target], sources, false));
};
exports.deepAssign = deepAssign;
