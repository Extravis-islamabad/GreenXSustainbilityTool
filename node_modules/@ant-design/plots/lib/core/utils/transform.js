"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformOptions = void 0;
var constants_1 = require("../constants");
var index_1 = require("./index");
/**
 * @title 将自定义配置转换为 G2 接受的格式
 */
var transformOptions = function (params) {
    var options = (0, index_1.filterTransformed)(params);
    var _a = options.children, children = _a === void 0 ? [] : _a;
    var getRest = function (o) {
        var children = o.children, type = o.type, data = o.data, rest = __rest(o, ["children", "type", "data"]);
        return (0, index_1.omit)(rest, (0, index_1.getShapeConfigKeys)());
    };
    var rest = getRest(options);
    var getValue = function (newConfig, value, origin) {
        var _a;
        if (typeof newConfig === 'function') {
            return newConfig(value, origin);
        }
        return _a = {},
            _a[newConfig] = value,
            _a;
    };
    var getCustomTransform = function (key) {
        var _a;
        return (_a = constants_1.SPECIAL_OPTIONS.find(function (option) { return option.key === key; })) === null || _a === void 0 ? void 0 : _a.callback;
    };
    /**
     * @description 更新图表配置
     */
    var updateOptions = function (origin, key, value) {
        var callback = getCustomTransform(key);
        if (callback) {
            callback(origin, key, value);
        }
        else {
            origin[key] = (0, index_1.deepAssign)({}, origin[key], value);
        }
    };
    /**
     * @title 通用转换逻辑
     * @description 直接修改原对象
     */
    var transformConfig = function (config, callback) {
        Object.keys(constants_1.TRANSFORM_OPTION_KEY).forEach(function (specKey) {
            var transformObject = constants_1.TRANSFORM_OPTION_KEY[specKey];
            /**
             * @description 遍历配置项，如果存在对应的映射规则，则进行转换
             * @example 详见 src/core/constants/index.ts
             */
            Object.keys(transformObject).forEach(function (key) {
                /**
                 * @description 常规图表
                 * @example Line Bar Column 等单图层图表
                 */
                if (config[key]) {
                    var transformValue = getValue(transformObject[key], config[key], config);
                    updateOptions(config, specKey, transformValue);
                }
                if ((0, index_1.isFunction)(callback))
                    callback(transformObject, specKey, key);
            });
        });
        return config;
    };
    children.forEach(function (child) {
        /**
         * 提前先 child 创造一个 config 防止 rest 被污染 和 child 数据缺失
         * @description 外层配置应用到所有 children
         */
        var config = (0, index_1.deepAssign)({}, rest, child);
        transformConfig((0, index_1.deepAssign)(child, config));
    });
    /**
     * @description
     *  1. 将 CONFIG_SHAPE 中的配置项, 转换为 children
     * @example 详见 src/core/constants/index.ts
     */
    Object.keys(options).forEach(function (key) {
        var exist = constants_1.CONFIG_SHAPE.find(function (item) { return item.key === key; });
        if (exist) {
            var type = exist.type, extend_keys = exist.extend_keys;
            if (type) {
                children.push(transformConfig((0, index_1.deepAssign)({}, (0, index_1.pick)(options, extend_keys), { type: type }, options[key])));
            }
            else {
                // annotations
                if ((0, index_1.isArray)(options[key])) {
                    options[key].forEach(function (annotation) {
                        children.push(transformConfig(annotation));
                    });
                }
            }
        }
    });
    (0, index_1.deleteCustomKeys)(options);
    return params;
};
exports.transformOptions = transformOptions;
