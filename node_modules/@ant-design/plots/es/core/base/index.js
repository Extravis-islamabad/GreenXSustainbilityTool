var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import EE from '@antv/event-emitter';
import { Chart, ChartEvent } from '@antv/g2';
import { bind } from 'size-sensor';
import { CHART_OPTIONS, ANNOTATION_LIST, SKIP_DEL_CUSTOM_SIGN } from '../constants';
import { merge, omit, pick, deleteCustomKeys, deleteChartOptionKeys } from '../utils';
import { Annotaion } from '../annotation';
var SOURCE_ATTRIBUTE_NAME = 'data-chart-source-type';
var ANNOTATION_MAP = new Map();
var Plot = /** @class */ (function (_super) {
    __extends(Plot, _super);
    function Plot(container, options) {
        var _this = _super.call(this) || this;
        _this.container = typeof container === 'string' ? document.getElementById(container) : container;
        _this.options = merge({}, _this.getBaseOptions(), _this.getDefaultOptions(), options);
        _this.createG2();
        _this.bindEvents();
        return _this;
    }
    /**
     * new Chart 所需配置
     */
    Plot.prototype.getChartOptions = function () {
        var _a = this.container, clientWidth = _a.clientWidth, clientHeight = _a.clientHeight;
        // 逻辑简化：如果存在 width 或 height，则直接使用，否则使用容器大小
        var _b = this.options, _c = _b.width, width = _c === void 0 ? clientWidth || 640 : _c, _d = _b.height, height = _d === void 0 ? clientHeight || 480 : _d, _e = _b.autoFit, autoFit = _e === void 0 ? true : _e;
        return __assign(__assign({}, pick(this.options, CHART_OPTIONS)), { container: this.container, width: width, height: height, autoFit: autoFit });
    };
    /**
     * G2 options(Spec) 配置
     */
    Plot.prototype.getSpecOptions = function () {
        if (this.type === 'base' || this[SKIP_DEL_CUSTOM_SIGN]) {
            return __assign(__assign({}, this.options), this.getChartOptions());
        }
        return deleteCustomKeys(omit(this.options, CHART_OPTIONS), true);
    };
    /**
     * 创建 G2 实例
     */
    Plot.prototype.createG2 = function () {
        if (!this.container) {
            throw Error('The container is not initialized!');
        }
        this.chart = new Chart(this.getChartOptions());
        // 给容器增加标识，知道图表的来源区别于 G2
        this.container.setAttribute(SOURCE_ATTRIBUTE_NAME, 'Ant Design Charts');
    };
    /**
     * 绑定代理所有 G2 的事件
     */
    Plot.prototype.bindEvents = function () {
        var _this = this;
        if (this.chart) {
            this.chart.on('*', function (e) {
                if (e === null || e === void 0 ? void 0 : e.type) {
                    _this.emit(e.type, e);
                }
            });
        }
    };
    Plot.prototype.getBaseOptions = function () {
        return { type: 'view' };
    };
    /**
     * 获取默认的 options 配置项，每个组件都可以复写
     */
    Plot.prototype.getDefaultOptions = function () { };
    /**
     * 绘制
     */
    Plot.prototype.render = function () {
        var _this = this;
        // 执行 adaptor , base 穿透类型不必 adaptor.
        if (this.type !== 'base') {
            this.execAdaptor();
        }
        // options 转换
        this.chart.options(this.getSpecOptions());
        // 渲染
        this.chart.render().then(function () {
            _this.annotations();
        });
        // 绑定
        this.bindSizeSensor();
    };
    /**
     * annotaions
     */
    Plot.prototype.annotations = function () {
        var _this = this;
        ANNOTATION_LIST.forEach(function (annotation) {
            var key = annotation.key, shape = annotation.shape;
            var annotationOptions = _this.options[key];
            if (ANNOTATION_MAP.has(key)) {
                ANNOTATION_MAP.get(key).destroy();
            }
            if (annotationOptions) {
                ANNOTATION_MAP.set(key, new Annotaion[shape](_this.chart, annotationOptions));
            }
        });
    };
    /**
     * 更新
     * @param options
     */
    Plot.prototype.update = function (options) {
        this.updateOption(options);
    };
    /**
     * 更新配置
     * @param options
     */
    Plot.prototype.updateOption = function (options) {
        this.options = merge({}, this.options, options);
    };
    /**
     * 更新数据
     * @override
     * @param options
     */
    Plot.prototype.changeData = function (data) {
        this.chart.changeData(data);
    };
    /**
     * 修改画布大小
     * @param width
     * @param height
     */
    Plot.prototype.changeSize = function (width, height) {
        this.chart.changeSize(width, height);
    };
    /**
     * 销毁
     */
    Plot.prototype.destroy = function () {
        // 取消 size-sensor 的绑定
        this.unbindSizeSensor();
        // G2 的销毁
        this.chart.destroy();
        // 清空已经绑定的事件
        this.off();
        this.container.removeAttribute(SOURCE_ATTRIBUTE_NAME);
    };
    /**
     * 执行 adaptor 操作
     */
    Plot.prototype.execAdaptor = function () {
        var adaptor = this.getSchemaAdaptor();
        // 转化成 G2 Spec
        adaptor({
            chart: this.chart,
            options: deleteChartOptionKeys(this.options),
        });
    };
    /**
     * 当图表容器大小变化的时候，执行的函数
     */
    Plot.prototype.triggerResize = function () {
        this.chart.forceFit();
    };
    /**
     * 绑定 dom 容器大小变化的事件
     */
    Plot.prototype.bindSizeSensor = function () {
        var _this = this;
        if (this.unbind) {
            return;
        }
        var _a = this.options.autoFit, autoFit = _a === void 0 ? true : _a;
        if (autoFit) {
            this.chart.on(ChartEvent.AFTER_CHANGE_SIZE, function () {
                _this.annotations();
            });
            this.unbind = bind(this.container, function () {
                // 获取最新的宽高信息
                var _a = _this.container, clientHeight = _a.clientHeight, clientWidth = _a.clientWidth;
                var _b = _this.chart.options(), width = _b.width, height = _b.height;
                // 主要是防止绑定的时候触发 resize 回调
                if (clientHeight !== width || clientWidth !== height) {
                    _this.triggerResize();
                }
            });
        }
    };
    /**
     * 取消绑定
     */
    Plot.prototype.unbindSizeSensor = function () {
        if (this.unbind) {
            this.unbind();
            this.unbind = undefined;
        }
    };
    return Plot;
}(EE));
export { Plot };
