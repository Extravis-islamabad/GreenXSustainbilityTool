/** new Chart options */
export declare const CHART_OPTIONS: string[];
/** 最终透传给 G2 Spec 的保留字 */
export declare const RESERVED_KEYS: string[];
/** 特殊标识，用于标识改配置来自于转换逻辑，而非用户配置 */
export declare const TRANSFORM_SIGN = "__transform__";
/** 特殊标识，用于跳过 删除已转换的配置项 */
export declare const SKIP_DEL_CUSTOM_SIGN = "__skipDelCustomKeys__";
export declare const TRANSFORM_OPTION_KEY: {
    encode: {
        xField: string;
        yField: string;
        colorField: string;
        angleField: string;
        keyField: string;
        sizeField: string;
        shapeField: string;
        seriesField: string;
        positionField: string;
        textField: string;
        valueField: string;
        binField: string;
    };
    transform: {
        /**
         * @title 堆叠
         * @example
         *  1. stack: true -> transform: [{type: 'stackY'}]
         */
        stack: (value: boolean | object) => {
            type: string;
            available: boolean | object;
        } | {
            type: string;
            available?: undefined;
        };
        /**
         * @title 归一化
         * @example
         *  1. normalize: true -> transform: [{type: 'normalizeY'}]
         */
        normalize: (value: boolean | object) => {
            type: string;
            available: boolean | object;
        } | {
            type: string;
            available?: undefined;
        };
        /**
         * @title 百分比
         * @description 同 normalize
         * @example
         *  1. percent: true -> transform: [{type: 'normalizeY'}]
         */
        percent: (value: boolean | object) => {
            type: string;
            available: boolean | object;
        } | {
            type: string;
            available?: undefined;
        };
        /**
         * @title 分组
         * @example
         *  1. group: true -> transform: [{type: 'dodgeX'}]
         */
        group: (value: boolean | object) => {
            type: string;
            available: boolean | object;
        } | {
            type: string;
            available?: undefined;
        };
        /**
         * @title 排序
         * @example
         *  1. sort: true -> transform: [{type: 'sortX'}]
         */
        sort: (value: boolean | object) => {
            type: string;
            available: boolean | object;
        } | {
            type: string;
            available?: undefined;
        };
        /**
         * @title 对称
         * @example
         *  1. symmetry: true -> transform: [{type: 'symmetryY'}]
         */
        symmetry: (value: boolean | object) => {
            type: string;
            available: boolean | object;
        } | {
            type: string;
            available?: undefined;
        };
        /**
         * @title 对 y 和 y1 通道求差集
         * @example
         *  1. diff: true -> transform: [{type: 'diffY'}]
         */
        diff: (value: boolean | object) => {
            type: string;
            available: boolean | object;
        } | {
            type: string;
            available?: undefined;
        };
    };
    scale: {
        meta: (value: object) => object;
    };
    labels: {
        label: (value: object) => object;
    };
    style: {
        /**
         * @title 折线的形状
         * @example
         *  1. shape: 'smooth' -> style: {shape: 'smooth'}
         */
        shape: string;
        /**
         * @title 是否链接空值
         * @description 支持 boolean 和 对象类型
         */
        connectNulls: (value: boolean | object) => boolean | object;
    };
};
export declare const CONFIG_SHAPE: ({
    key: string;
    extend_keys: any[];
    type?: undefined;
} | {
    key: string;
    type: string;
    extend_keys: string[];
})[];
/**
 * @description 一些特殊的配置项，需要自定义转换逻辑
 */
export declare const SPECIAL_OPTIONS: ({
    key: string;
    callback: (origin: object, key: string, value: {
        type: string;
        available?: boolean;
    }) => void;
} | {
    key: string;
    callback: (origin: object, key: string, value: any[] | {
        [key: string]: unknown;
        available?: boolean;
        text?: string | Function;
    }) => void;
})[];
export declare const ANNOTATION_LIST: {
    key: string;
    shape: string;
}[];
