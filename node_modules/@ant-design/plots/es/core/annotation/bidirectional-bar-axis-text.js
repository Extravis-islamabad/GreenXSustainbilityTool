var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
// @ts-expect-error
import { Text } from '@antv/g';
import { get, isFunction, uniqBy } from '../utils';
import { VERTICAL_MARGIN } from '../plots/bidirectional-bar/constants';
var BidirectionalBarAxisText = /** @class */ (function () {
    function BidirectionalBarAxisText(chart, options) {
        this.container = [];
        if (!options)
            return;
        this.chart = chart;
        this.options = options;
        this.init();
    }
    BidirectionalBarAxisText.prototype.getElementsLayout = function () {
        var layout = this.options.layout;
        var isVertical = layout === 'vertical';
        var elements = this.canvas.document.getElementsByClassName('element');
        var elementsLayout = [];
        elements.forEach(function (element) {
            var bbox = element.getBBox();
            var x = bbox.x, y = bbox.y, width = bbox.width, height = bbox.height;
            elementsLayout.push({
                bbox: bbox,
                x: x,
                y: y,
                width: width,
                height: height,
                data: element['__data__'],
            });
        });
        return isVertical ? uniqBy(elementsLayout, 'x') : uniqBy(elementsLayout, 'y');
    };
    BidirectionalBarAxisText.prototype.getBidirectionalBarAxisTextLayout = function () {
        var layout = this.options.layout;
        var isVertical = layout === 'vertical';
        var elementsLayout = this.getElementsLayout();
        var textPath = ['title'];
        var textLayout = [];
        var _a = get(this.views, [0, 'layout']), viewWidth = _a.width, viewHeight = _a.height;
        elementsLayout.forEach(function (element) {
            var x = element.x, y = element.y, height = element.height, width = element.width, data = element.data;
            var text = get(data, textPath);
            if (isVertical) {
                textLayout.push({
                    x: x + width / 2,
                    y: viewHeight,
                    text: text,
                });
            }
            else {
                textLayout.push({
                    x: viewWidth,
                    y: y + height / 2,
                    text: text,
                });
            }
        });
        return textLayout;
    };
    BidirectionalBarAxisText.prototype.init = function () {
        var _a = this.chart.getContext(), canvas = _a.canvas, views = _a.views;
        this.views = views;
        this.canvas = canvas;
        this.drawBidirectionalBarAxisText();
    };
    BidirectionalBarAxisText.prototype.transformLabelStyle = function (style) {
        var removeLabel = {};
        var reg = /^label[A-Z]/;
        Object.keys(style).forEach(function (key) {
            if (reg.test(key)) {
                removeLabel[key.replace('label', '').replace(/^[A-Z]/, function (match) { return match.toLowerCase(); })] = style[key];
            }
        });
        return removeLabel;
    };
    BidirectionalBarAxisText.prototype.drawBidirectionalBarAxisText = function () {
        var _this = this;
        var axisLayout = this.getBidirectionalBarAxisTextLayout();
        var _a = this.options, viewLayout = _a.layout, labelFormatter = _a.labelFormatter, textStyle = __rest(_a, ["layout", "labelFormatter"]);
        axisLayout.forEach(function (layout) {
            var x = layout.x, y = layout.y, text = layout.text;
            var textNode = new Text({
                style: __assign({ x: x, y: y, text: isFunction(labelFormatter) ? labelFormatter(text) : text, fontSize: 12, textBaseline: 'middle', textAlign: 'center', fill: '#000', wordWrap: true, wordWrapWidth: viewLayout === 'horizontal' ? VERTICAL_MARGIN * 2 : 120, maxLines: 2, textOverflow: 'ellipsis' }, _this.transformLabelStyle(textStyle)),
            });
            _this.canvas.appendChild(textNode);
            _this.container.push(textNode);
        });
    };
    BidirectionalBarAxisText.prototype.update = function (options) { };
    BidirectionalBarAxisText.prototype.destroy = function () {
        this.container.forEach(function (child) {
            child.destroy();
        });
    };
    return BidirectionalBarAxisText;
}());
export { BidirectionalBarAxisText };
